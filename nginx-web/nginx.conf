# nginx/nginx.conf
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    # Define o upstream para a API Flask (nome do serviço Docker + porta interna)
    upstream api_backend {
        server zap-api-flask:5000;
    }

    server {
        listen 80;
        server_name localhost;

        # Configuração para servir o frontend (HTML, CSS, JS)
        location / {
            root /usr/share/nginx/html; # Onde os arquivos do frontend foram copiados
            index index.html dashboard.html; # Priorize index.html, depois dashboard.html (ou o que for principal)
            try_files $uri $uri/ =404; # Tenta servir o arquivo ou diretório, se não 404
        }

        # Proxy para a API Flask
        # Todas as requisições para /api/ serão enviadas para o serviço Flask
        location /api/ {
            proxy_pass http://api_backend/; # Encaminha para o serviço 'api' no Docker
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Adicione cabeçalhos CORS aqui também, para garantir
            add_header 'Access-Control-Allow-Origin' '*' always; # Permite de qualquer origem
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            # Manipula requisições OPTIONS (preflight)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Endpoint para servir relatórios HTML estáticos (se existirem na pasta reports do frontend)
        # Se você gera relatórios HTML em 'Zap-Job/reports' e quer que o Nginx os sirva,
        # você teria que montar um volume para reports no Nginx, ou copiá-los para web-html/reports.
        # Por enquanto, focamos na API e JSON.
        # Se os relatórios HTML forem gerados em 'Zap-Job/reports' e você quiser vê-los via Nginx,
        # O Nginx precisa ter acesso à pasta reports.
        # Uma forma seria adicioná-la em web-html/, ou adicionar um volume apenas para ela no Nginx.
        # Ex: volumes: - ./reports:/usr/share/nginx/html/reports
        # location /reports/ {
        #    root /usr/share/nginx/html;
        #    try_files $uri $uri/ =404;
        #    autoindex on; # Permite listagem de diretório para debug
        # }
    }
}